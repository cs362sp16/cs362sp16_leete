        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:200
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:int council_room_fn(int currentPlayer, struct gameState *state, int handPos);
        -:   10:int smithy_fn(int currentPlayer, struct gameState *state, int handPos);
        -:   11:int village_fn(int currentPlayer, struct gameState *state, int handPos);
        -:   12:int great_hall_fn(int currentPlayer, struct gameState *state, int handPos);
        -:   13:int outpost_fn(int currentPlayer, struct gameState *state, int handPos);
        -:   14:
 10168600:   15:int compare(const void* a, const void* b) {
 10168600:   16:  if (*(int*)a > *(int*)b)
  3401600:   17:    return 1;
  6767000:   18:  if (*(int*)a < *(int*)b)
   948400:   19:    return -1;
  5818600:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
     4000:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
     4000:   51:  SelectStream(1);
     4000:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
     4000:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
     4000:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
    44000:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
   440000:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
   400000:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
     4000:   80:  if (numPlayers == 2)
        -:   81:    {
     1800:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
     2200:   84:  else if (numPlayers == 3)
        -:   85:    {
     2200:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
     4000:   94:  if (numPlayers == 2)
        -:   95:    {
     1800:   96:      state->supplyCount[estate] = 8;
     1800:   97:      state->supplyCount[duchy] = 8;
     1800:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
     2200:  102:      state->supplyCount[estate] = 12;
     2200:  103:      state->supplyCount[duchy] = 12;
     2200:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
     4000:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4000:  109:  state->supplyCount[silver] = 40;
     4000:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
    84000:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
   660000:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
   620000:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
    40000:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
     8000:  122:		  if (numPlayers == 2){ 
     1800:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
     2200:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
    36000:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
    40000:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
   580000:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
    14200:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
    10200:  147:      state->deckCount[i] = 0;
    40800:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
    30600:  150:	  state->deck[i][j] = estate;
    30600:  151:	  state->deckCount[i]++;
        -:  152:	}
    81600:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
    71400:  155:	  state->deck[i][j] = copper;
    71400:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
    14200:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
    10200:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
    14200:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
    10200:  173:      state->handCount[i] = 0;
    10200:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
   112000:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
   108000:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
     4000:  189:  state->outpostPlayed = 0;
     4000:  190:  state->phase = 0;
     4000:  191:  state->numActions = 1;
     4000:  192:  state->numBuys = 1;
     4000:  193:  state->playedCardCount = 0;
     4000:  194:  state->whoseTurn = 0;
     4000:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
    24000:  199:  for (it = 0; it < 5; it++){
    20000:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
     4000:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
     4000:  205:  return 0;
        -:  206:}
        -:  207:
   230200:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
   230200:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
   230200:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
   230200:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
  4172200:  221:  while (state->deckCount[player] > 0) {
  3711800:  222:    card = floor(Random() * state->deckCount[player]);
  3711800:  223:    newDeck[newDeckPos] = state->deck[player][card];
  3711800:  224:    newDeckPos++;
 26079200:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
 22367400:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
  3711800:  228:    state->deckCount[player]--;
        -:  229:  }
  3942000:  230:  for (i = 0; i < newDeckPos; i++) {
  3711800:  231:    state->deck[player][i] = newDeck[i];
  3711800:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
   230200:  235:  return 0;
        -:  236:}
        -:  237:
  2478400:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
  2478400:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
  2478400:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
  2478400:  250:  if ( state->numActions < 1 )
        -:  251:    {
     1800:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
  2476600:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
  2476600:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
  2431600:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    45000:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
     4400:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    40600:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    40600:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    40600:  276:  return 0;
        -:  277:}
        -:  278:
  1331200:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
  1331200:  287:  who = state->whoseTurn;
        -:  288:
  1331200:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
   324200:  292:    return -1;
  1007000:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
   318200:  296:    return -1;
   688800:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
   303800:  300:    return -1;
        -:  301:  } else {
   385000:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
   385000:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
   385000:  306:    state->coins = (state->coins) - (getCost(supplyPos));
   385000:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
   385000:  315:  return 0;
        -:  316:}
        -:  317:
  8273400:  318:int numHandCards(struct gameState *state) {
  8273400:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
 24309200:  322:int handCard(int handPos, struct gameState *state) {
 24309200:  323:  int currentPlayer = whoseTurn(state);
 24309200:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
  1392600:  327:int supplyCount(int card, struct gameState *state) {
  1392600:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
     2400:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
     2400:  333:  int count = 0;
        -:  334:
    94400:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    92000:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    13200:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    10800:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    64000:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    61600:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
     2400:  350:  return count;
        -:  351:}
        -:  352:
 38507200:  353:int whoseTurn(struct gameState *state) {
 38507200:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
   689200:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
   689200:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
  4134600:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
  3445400:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  3445400:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
   689200:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
   689200:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
   417400:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
   271800:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
   689200:  377:  state->outpostPlayed = 0;
   689200:  378:  state->phase = 0;
   689200:  379:  state->numActions = 1;
   689200:  380:  state->coins = 0;
   689200:  381:  state->numBuys = 1;
   689200:  382:  state->playedCardCount = 0;
   689200:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
  4135200:  387:  for (k = 0; k < 5; k++){
  3446000:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
   689200:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
   689200:  394:  return 0;
        -:  395:}
        -:  396:
   693200:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
   693200:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
   693200:  408:  j = 0;
 18023200:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
 17330000:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
   749000:  413:	  j++;
        -:  414:	}
        -:  415:    }
   693200:  416:  if ( j >= 3)
        -:  417:    {
     4000:  418:      return 1;
        -:  419:    }
        -:  420:
   689200:  421:  return 0;
        -:  422:}
        -:  423:
  1816600:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
  1816600:  427:  int score = 0;
        -:  428:  //score from hand
  5282000:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
  3465400:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
  3465400:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
  3465400:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
  3465400:  434:      if (state->hand[player][i] == province) { score = score + 6; };
  3465400:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
  3465400:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
 25609800:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
 23793200:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
 23793200:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
 23793200:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
 23793200:  445:      if (state->discard[player][i] == province) { score = score + 6; };
 23793200:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
 23793200:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
 25609800:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
 23793200:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
 23793200:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
 23793200:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
 23793200:  456:      if (state->deck[player][i] == province) { score = score + 6; };
 23793200:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
 23793200:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
  1816600:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
  3506000:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
  3506000:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
  3829800:  540:    for (i = 0; i < state->discardCount[player];i++){
  3609800:  541:      state->deck[player][i] = state->discard[player][i];
  3609800:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
   220000:  545:    state->deckCount[player] = state->discardCount[player];
   220000:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
   220000:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
   220000:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
   220000:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
   220000:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
   220000:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
   220000:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
   220000:  570:    state->deckCount[player]--;
   220000:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
  3286000:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
  3286000:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
  3286000:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  3286000:  583:    state->deckCount[player]--;
  3286000:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
  3506000:  587:  return 0;
        -:  588:}
        -:  589:
  1075000:  590:int getCost(int cardNumber)
        -:  591:{
  1075000:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
   344000:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
   337800:  603:      return 0;
        -:  604:    case silver:
   231800:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    81400:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    80000:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
    45000:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45000:  660:  int currentPlayer = whoseTurn(state);
    45000:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45000:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45000:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45000:  667:  int z = 0;// this is the counter for the temp hand
    45000:  668:  if (nextPlayer > (state->numPlayers - 1)){
    10800:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45000:  674:  switch( card ) 
        -:  675:    {
        -:  676:    case adventurer:
    #####:  677:      while(drawntreasure<2){
    #####:  678:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  679:	  shuffle(currentPlayer, state);
        -:  680:	}
    #####:  681:	drawCard(currentPlayer, state);
    #####:  682:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  683:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  684:	  drawntreasure++;
        -:  685:	else{
    #####:  686:	  temphand[z]=cardDrawn;
    #####:  687:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  688:	  z++;
        -:  689:	}
        -:  690:      }
    #####:  691:      while(z-1>=0){
    #####:  692:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  693:	z=z-1;
        -:  694:      }
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case council_room:
        -:  698:	
    #####:  699:      return council_room_fn(currentPlayer, state, handPos);
        -:  700:			
        -:  701:    case feast:
        -:  702:      //gain card with cost up to 5
        -:  703:      //Backup hand
    #####:  704:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  705:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  706:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  707:      }
        -:  708:      //Backup hand
        -:  709:
        -:  710:      //Update Coins for Buy
    #####:  711:      updateCoins(currentPlayer, state, 5);
    #####:  712:      x = 1;//Condition to loop on
    #####:  713:      while( x == 1) {//Buy one card
    #####:  714:	if (supplyCount(choice1, state) <= 0){
        -:  715:	  if (DEBUG)
        -:  716:	    printf("None of that card left, sorry!\n");
        -:  717:
        -:  718:	  if (DEBUG){
        -:  719:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  720:	  }
        -:  721:	}
    #####:  722:	else if (state->coins < getCost(choice1)){
    #####:  723:	  printf("That card is too expensive!\n");
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  727:	  }
        -:  728:	}
        -:  729:	else{
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:	  }
        -:  734:
    #####:  735:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  736:	  x = 0;//No more buying cards
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  740:	  }
        -:  741:
        -:  742:	}
        -:  743:      }     
        -:  744:
        -:  745:      //Reset Hand
    #####:  746:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  747:	state->hand[currentPlayer][i] = temphand[i];
    #####:  748:	temphand[i] = -1;
        -:  749:      }
        -:  750:      //Reset Hand
        -:  751:      			
    #####:  752:      return 0;
        -:  753:			
        -:  754:    case gardens:
    #####:  755:      return -1;
        -:  756:			
        -:  757:    case mine:
     5000:  758:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  759:
     5000:  760:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  761:	{
     4400:  762:	  return -1;
        -:  763:	}
        -:  764:		
      600:  765:      if (choice2 > treasure_map || choice2 < curse)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
      600:  770:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
      600:  775:      gainCard(choice2, state, 2, currentPlayer);
        -:  776:
        -:  777:      //discard card from hand
      600:  778:      discardCard(handPos, currentPlayer, state, 0);
        -:  779:
        -:  780:      //discard trashed card
     1800:  781:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  782:	{
     1800:  783:	  if (state->hand[currentPlayer][i] == j)
        -:  784:	    {
      600:  785:	      discardCard(i, currentPlayer, state, 0);			
      600:  786:	      break;
        -:  787:	    }
        -:  788:	}
        -:  789:			
      600:  790:      return 0;
        -:  791:			
        -:  792:    case remodel:
    #####:  793:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  794:
    #####:  795:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  796:	{
    #####:  797:	  return -1;
        -:  798:	}
        -:  799:
    #####:  800:      gainCard(choice2, state, 0, currentPlayer);
        -:  801:
        -:  802:      //discard card from hand
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:
        -:  805:      //discard trashed card
    #####:  806:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  807:	{
    #####:  808:	  if (state->hand[currentPlayer][i] == j)
        -:  809:	    {
    #####:  810:	      discardCard(i, currentPlayer, state, 0);			
    #####:  811:	      break;
        -:  812:	    }
        -:  813:	}
        -:  814:
        -:  815:
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case smithy:
        -:  819:    
    #####:  820:      return smithy_fn(currentPlayer, state, handPos);
        -:  821:		
        -:  822:    case village:
        -:  823:    
    40000:  824:      return village_fn(currentPlayer, state, handPos);
        -:  825:		
        -:  826:    case baron:
    #####:  827:      state->numBuys++;//Increase buys by 1!
    #####:  828:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  829:	int p = 0;//Iterator for hand!
    #####:  830:	int card_not_discarded = 1;//Flag for discard set!
    #####:  831:	while(card_not_discarded){
    #####:  832:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  833:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  834:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  835:	    state->discardCount[currentPlayer]++;
    #####:  836:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  837:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  838:	    }
    #####:  839:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  840:	    state->handCount[currentPlayer]--;
    #####:  841:	    card_not_discarded = 0;//Exit the loop
        -:  842:	  }
    #####:  843:	  else if (p > state->handCount[currentPlayer]){
        -:  844:	    if(DEBUG) {
        -:  845:	      printf("No estate cards in your hand, invalid choice\n");
        -:  846:	      printf("Must gain an estate if there are any\n");
        -:  847:	    }
    #####:  848:	    if (supplyCount(estate, state) > 0){
    #####:  849:	      gainCard(estate, state, 0, currentPlayer);
    #####:  850:	      state->supplyCount[estate]--;//Decrement estates
    #####:  851:	      if (supplyCount(estate, state) == 0){
    #####:  852:		isGameOver(state);
        -:  853:	      }
        -:  854:	    }
    #####:  855:	    card_not_discarded = 0;//Exit the loop
        -:  856:	  }
        -:  857:			    
        -:  858:	  else{
    #####:  859:	    p++;//Next card
        -:  860:	  }
        -:  861:	}
        -:  862:      }
        -:  863:			    
        -:  864:      else{
    #####:  865:	if (supplyCount(estate, state) > 0){
    #####:  866:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  867:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  868:	  if (supplyCount(estate, state) == 0){
    #####:  869:	    isGameOver(state);
        -:  870:	  }
        -:  871:	}
        -:  872:      }
        -:  873:	    
        -:  874:      
    #####:  875:      return 0;
        -:  876:		
        -:  877:    case great_hall:
        -:  878:
        -:  879:    
    #####:  880:      return great_hall_fn(currentPlayer, state, handPos);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:      j = 0;		//used to check if player has enough cards to discard
        -: 1017:
    #####: 1018:      if (choice2 > 2 || choice2 < 0)
        -: 1019:	{
    #####: 1020:	  return -1;				
        -: 1021:	}
        -: 1022:
    #####: 1023:      if (choice1 == handPos)
        -: 1024:	{
    #####: 1025:	  return -1;
        -: 1026:	}
        -: 1027:
    #####: 1028:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1029:	{
    #####: 1030:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1031:	    {
    #####: 1032:	      j++;
        -: 1033:	    }
        -: 1034:	}
    #####: 1035:      if (j < choice2)
        -: 1036:	{
    #####: 1037:	  return -1;				
        -: 1038:	}
        -: 1039:
        -: 1040:      if (DEBUG) 
        -: 1041:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1042:
        -: 1043:      //increase supply count for choosen card by amount being discarded
    #####: 1044:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1045:			
        -: 1046:      //each other player gains a copy of revealed card
    #####: 1047:      for (i = 0; i < state->numPlayers; i++)
        -: 1048:	{
    #####: 1049:	  if (i != currentPlayer)
        -: 1050:	    {
    #####: 1051:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1052:	    }
        -: 1053:	}
        -: 1054:
        -: 1055:      //discard played card from hand
    #####: 1056:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1057:
        -: 1058:      //trash copies of cards returned to supply
    #####: 1059:      for (j = 0; j < choice2; j++)
        -: 1060:	{
    #####: 1061:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1062:	    {
    #####: 1063:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1064:		{
    #####: 1065:		  discardCard(i, currentPlayer, state, 1);
    #####: 1066:		  break;
        -: 1067:		}
        -: 1068:	    }
        -: 1069:	}			
        -: 1070:
    #####: 1071:      return 0;
        -: 1072:		
        -: 1073:    case cutpurse:
        -: 1074:
    #####: 1075:      updateCoins(currentPlayer, state, 2);
    #####: 1076:      for (i = 0; i < state->numPlayers; i++)
        -: 1077:	{
    #####: 1078:	  if (i != currentPlayer)
        -: 1079:	    {
    #####: 1080:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1081:		{
    #####: 1082:		  if (state->hand[i][j] == copper)
        -: 1083:		    {
    #####: 1084:		      discardCard(j, i, state, 0);
    #####: 1085:		      break;
        -: 1086:		    }
    #####: 1087:		  if (j == state->handCount[i])
        -: 1088:		    {
    #####: 1089:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1090:			{
        -: 1091:			  if (DEBUG)
        -: 1092:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1093:			}	
    #####: 1094:		      break;
        -: 1095:		    }		
        -: 1096:		}
        -: 1097:					
        -: 1098:	    }
        -: 1099:				
        -: 1100:	}				
        -: 1101:
        -: 1102:      //discard played card from hand
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1104:
    #####: 1105:      return 0;
        -: 1106:
        -: 1107:		
        -: 1108:    case embargo: 
        -: 1109:      //+2 Coins
    #####: 1110:      state->coins = state->coins + 2;
        -: 1111:			
        -: 1112:      //see if selected pile is in play
    #####: 1113:      if ( state->supplyCount[choice1] == -1 )
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:			
        -: 1118:      //add embargo token to selected supply pile
    #####: 1119:      state->embargoTokens[choice1]++;
        -: 1120:			
        -: 1121:      //trash card
    #####: 1122:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1123:      return 0;
        -: 1124:		
        -: 1125:    case outpost:
        -: 1126:       
    #####: 1127:      return outpost_fn(currentPlayer, state, handPos);
        -: 1128:		
        -: 1129:    case salvager:
        -: 1130:      //+1 buy
    #####: 1131:      state->numBuys++;
        -: 1132:			
    #####: 1133:      if (choice1)
        -: 1134:	{
        -: 1135:	  //gain coins equal to trashed card
    #####: 1136:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1137:	  //trash card
    #####: 1138:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1139:	}
        -: 1140:			
        -: 1141:      //discard card
    #####: 1142:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case sea_hag:
    #####: 1146:      for (i = 0; i < state->numPlayers; i++){
    #####: 1147:	if (i != currentPlayer){
    #####: 1148:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1149:	  state->discardCount[i]++;
    #####: 1150:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1151:	}
        -: 1152:      }
    #####: 1153:      return 0;
        -: 1154:		
        -: 1155:    case treasure_map:
        -: 1156:      //search hand for another treasure_map
    #####: 1157:      index = -1;
    #####: 1158:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1159:	{
    #####: 1160:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1161:	    {
    #####: 1162:	      index = i;
    #####: 1163:	      break;
        -: 1164:	    }
        -: 1165:	}
    #####: 1166:      if (index > -1)
        -: 1167:	{
        -: 1168:	  //trash both treasure cards
    #####: 1169:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1170:	  discardCard(index, currentPlayer, state, 1);
        -: 1171:
        -: 1172:	  //gain 4 Gold cards
    #####: 1173:	  for (i = 0; i < 4; i++)
        -: 1174:	    {
    #####: 1175:	      gainCard(gold, state, 1, currentPlayer);
        -: 1176:	    }
        -: 1177:				
        -: 1178:	  //return success
    #####: 1179:	  return 1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //no second treasure_map found in hand
    #####: 1183:      return -1;
        -: 1184:    }
        -: 1185:	
    #####: 1186:  return -1;
        -: 1187:}
        -: 1188:
    41200: 1189:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1190:{
        -: 1191:	
        -: 1192:  //if card is not trashed, added to Played pile 
    41200: 1193:  if (trashFlag < 1)
        -: 1194:    {
        -: 1195:      //add card to played pile
    41200: 1196:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    41200: 1197:      state->playedCardCount++;
        -: 1198:    }
        -: 1199:	
        -: 1200:  //set played card to -1
    41200: 1201:  state->hand[currentPlayer][handPos] = -1;
        -: 1202:  
        -: 1203:	
        -: 1204:  //remove card from player's hand
    41200: 1205:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1206:    {
        -: 1207:      //reduce number of cards in hand
    #####: 1208:      state->handCount[currentPlayer]--;
        -: 1209:    }
    41200: 1210:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1211:    {
        -: 1212:      //reduce number of cards in hand
    #####: 1213:      state->handCount[currentPlayer]--;
        -: 1214:    }
        -: 1215:  else 	
        -: 1216:    {
        -: 1217:      //replace discarded card with last card in hand
    41200: 1218:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1219:      //set last card to -1
    41200: 1220:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1221:      //reduce number of cards in hand
    41200: 1222:      state->handCount[currentPlayer]--;
        -: 1223:    }
        -: 1224:	
    41200: 1225:  return 0;
        -: 1226:}
        -: 1227:
   385600: 1228:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1229:{
        -: 1230:  //Note: supplyPos is enum of choosen card
        -: 1231:	
        -: 1232:  //check if supply pile is empty (0) or card is not used in game (-1)
   385600: 1233:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1234:    {
    #####: 1235:      return -1;
        -: 1236:    }
        -: 1237:	
        -: 1238:  //added card for [whoseTurn] current player:
        -: 1239:  // toFlag = 0 : add to discard
        -: 1240:  // toFlag = 1 : add to deck
        -: 1241:  // toFlag = 2 : add to hand
        -: 1242:
   385600: 1243:  if (toFlag == 1)
        -: 1244:    {
    #####: 1245:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1246:      state->deckCount[player]++;
        -: 1247:    }
   385600: 1248:  else if (toFlag == 2)
        -: 1249:    {
      600: 1250:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      600: 1251:      state->handCount[player]++;
        -: 1252:    }
        -: 1253:  else
        -: 1254:    {
   385000: 1255:      state->discard[player][ state->discardCount[player] ] = supplyPos;
   385000: 1256:      state->discardCount[player]++;
        -: 1257:    }
        -: 1258:	
        -: 1259:  //decrease number in supply pile
   385600: 1260:  state->supplyCount[supplyPos]--;
        -: 1261:	 
   385600: 1262:  return 0;
        -: 1263:}
        -: 1264:
   733800: 1265:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1266:{
        -: 1267:  int i;
        -: 1268:	
        -: 1269:  //reset coin count
   733800: 1270:  state->coins = 0;
        -: 1271:
        -: 1272:  //add coins for each Treasure card in player's hand
  4402200: 1273:  for (i = 0; i < state->handCount[player]; i++)
        -: 1274:    {
  3668400: 1275:      if (state->hand[player][i] == copper)
        -: 1276:	{
  2362600: 1277:	  state->coins += 1;
        -: 1278:	}
  1305800: 1279:      else if (state->hand[player][i] == silver)
        -: 1280:	{
   515400: 1281:	  state->coins += 2;
        -: 1282:	}
   790400: 1283:      else if (state->hand[player][i] == gold)
        -: 1284:	{
    #####: 1285:	  state->coins += 3;
        -: 1286:	}	
        -: 1287:    }	
        -: 1288:
        -: 1289:  //add bonus
   733800: 1290:  state->coins += bonus;
        -: 1291:
   733800: 1292:  return 0;
        -: 1293:  
        -: 1294:  
        -: 1295:  
        -: 1296:}
        -: 1297:
    #####: 1298:int council_room_fn(int currentPlayer, struct gameState *state, int handPos){ 
        -: 1299:        //+4 Cards
        -: 1300:        int i;
    #####: 1301:        for (i = 0; i < 3; i++)
        -: 1302:{
    #####: 1303:        drawCard(currentPlayer, state);
        -: 1304:        
        -: 1305:}
        -: 1306:
        -: 1307:        //+1 Buy
    #####: 1308:        state->numBuys++;
        -: 1309:
        -: 1310:        //Each other player draws a card
    #####: 1311:        for (i = 0; i < state->numPlayers; i++)
        -: 1312:{
    #####: 1313:        if ( i != currentPlayer )
        -: 1314:        {
    #####: 1315:                drawCard(i, state);
        -: 1316:        }
        -: 1317:}
        -: 1318:
        -: 1319:        //put played card in played card pile
    #####: 1320:        discardCard(handPos, currentPlayer, state, 0);
        -: 1321:
    #####: 1322:        return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int smithy_fn(int currentPlayer, struct gameState *state, int handPos){
        -: 1326:        //+3 Cards
        -: 1327:        int i;
    #####: 1328:        for (i = 0; i < 4; i++)
        -: 1329:{
    #####: 1330:        drawCard(currentPlayer, state);
        -: 1331:}
        -: 1332:
        -: 1333:        //discard card from hand
    #####: 1334:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1335:        return 0;
        -: 1336:}
        -: 1337:
    40000: 1338:int village_fn(int currentPlayer, struct gameState *state, int handPos){
        -: 1339:        //+l Card
    40000: 1340:        drawCard(currentPlayer, state);
        -: 1341:
        -: 1342:        //+2 Actions
    40000: 1343:        state->numActions = state->numActions + 2;
        -: 1344:
        -: 1345:        //discard played card from hand
    40000: 1346:        discardCard(handPos, currentPlayer, state, 0);
    40000: 1347:        return 0;
        -: 1348:}
        -: 1349:
    #####: 1350:int great_hall_fn(int currentPlayer, struct gameState *state, int handPos){
        -: 1351:
        -: 1352:        //+1 Card
    #####: 1353:        drawCard(currentPlayer, state);
        -: 1354:
        -: 1355:        //+1 Actions
    #####: 1356:        state->numActions++;
        -: 1357:
        -: 1358:        //discard card from hand
    #####: 1359:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1360:        return 0;
        -: 1361:}
        -: 1362:
    #####: 1363:int outpost_fn(int currentPlayer, struct gameState *state, int handPos){
        -: 1364:        //set outpost flag
    #####: 1365:        state->outpostPlayed++;
        -: 1366:        
        -: 1367:        //discard card
    #####: 1368:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1369:        return 0;
        -: 1370:}
        -: 1371:
        -: 1372:
        -: 1373://end of dominion.c
        -: 1374:
